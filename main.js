(()=>{"use strict";var e={169:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),r=n.n(a),o=n(645),i=n.n(o)()(r());i.push([e.id,".top-panel{background-color:#280000}.img-panel{display:flex;width:60%;height:70%;background-color:var(--bgColor);justify-content:center;align-items:center}.img-panel #home-image{object-fit:cover;width:100%;height:100%}.text-banner{display:flex;flex-direction:column;color:white;width:50%;background-color:var(--bgColor);height:70%;justify-content:space-evenly;align-items:center}#big-header{font-size:6rem;width:80%}#small-header,#small-header2{font-size:2rem;width:80%}*{--bgColor:rgb(26, 23, 23)}body{width:100vw;height:100vh;background-color:white;font-size:16pt}#content{width:100%;height:100%}.content-panel{display:flex;width:100%;height:100%;border:2px solid white;justify-content:center;align-items:center}\n","",{version:3,sources:["webpack://./src/nav.scss","webpack://./src/home.scss","webpack://./src/main.scss"],names:[],mappings:"AAEA,WACI,wBAHgB,CAInB,WCHG,YAAa,CACb,SAAU,CACV,UAAW,CACX,+BAAgC,CAChC,sBAAuB,CACvB,kBAAmB,CANvB,uBAUQ,gBAAiB,CACjB,UAAW,CACX,WAAY,CACf,aAID,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,SAAU,CACV,+BAAgC,CAChC,UAAW,CACX,4BAA6B,CAC7B,kBAAmB,CAEtB,YAGG,cAAe,CACf,SAAU,CACb,6BAIG,cAAe,CACf,SAAU,CCjCd,EACI,yBAAU,CAEb,KAED,WAAW,CACX,YAAY,CACZ,sBAAuB,CACvB,cAAc,CACb,SAGG,UAAU,CACV,WAAW,CACd,eAEG,YAAY,CACZ,UAAU,CACV,WAAW,CACX,sBAAsB,CACtB,sBAAuB,CACvB,kBAAmB",sourcesContent:["$navBG:rgb(40, 0, 0);\r\n\r\n.top-panel{\r\n    background-color:$navBG;\r\n}",".img-panel {\r\n    display: flex;\r\n    width: 60%;\r\n    height: 70%;\r\n    background-color: var(--bgColor);\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n\r\n    #home-image {\r\n        object-fit: cover;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n}\r\n\r\n.text-banner {\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    width: 50%;\r\n    background-color: var(--bgColor);\r\n    height: 70%;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n\r\n}\r\n\r\n#big-header {\r\n    font-size: 6rem;\r\n    width: 80%;\r\n}\r\n\r\n#small-header,\r\n#small-header2 {\r\n    font-size: 2rem;\r\n    width: 80%;\r\n}",'@import "nav";\r\n@import "home";\r\n\r\n*{\r\n    --bgColor:rgb(26, 23, 23);\r\n\r\n}\r\nbody{\r\nwidth:100vw;\r\nheight:100vh;\r\nbackground-color: white;\r\nfont-size:16pt;\r\n}\r\n#content{\r\n    \r\n    width:100%;\r\n    height:100%;\r\n}\r\n.content-panel{\r\n    display:flex;\r\n    width:100%;\r\n    height:100%;\r\n    border:2px solid white;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);a&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],d=a.base?c[0]+a.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var h=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var m=r(p,a);a.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=a(e,r),d=0;d<o.length;d++){var l=n(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{const e=n.p+"b5169f2820443df384b2.png",t=t=>{const n=document.createElement("div");n.classList.add("img-panel");const a=document.createElement("h2");a.textContent="La Cucina",a.id="big-header";const r=document.createElement("h2");r.textContent="Savor the taste of italy in every dish";const o=document.createElement("h2");o.textContent="Experience the delicious and wholesome flavors of italy, brought to your plate with locally sourced, fresh ingredients.",r.id="small-header",o.id="small-header2";const i=new Image;i.id="home-image",i.src=e,n.appendChild(i);const s=document.createElement("div");s.classList.add("text-banner"),s.appendChild(a),s.appendChild(r),s.appendChild(o),t.appendChild(n),t.appendChild(s)},a=(e,t,n)=>{document.querySelector("content-panel");const a=document.createElement("div");a.classList.add("menu-item");const r=document.createElement("h1");r.classList.add("dish-name");const o=document.createElement("p");o.classList.add("dish-desc"),r.textContent=t,o.textContent=n,a.appendChild(r),a.appendChild(o),e.appendChild(a)};var r=n(379),o=n.n(r),i=n(795),s=n.n(i),c=n(569),d=n.n(c),l=n(565),u=n.n(l),h=n(216),p=n.n(h),m=n(589),f=n.n(m),C=n(169),g={};g.styleTagTransform=f(),g.setAttributes=u(),g.insert=d().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=p(),o()(C.Z,g),C.Z&&C.Z.locals&&C.Z.locals;const A=e=>e.innerHTML="";console.log("boy"),(()=>{const e=document.querySelector("#content");console.log("suh");const t=document.createElement("div");t.classList.add("top-panel");const n=document.createElement("h1");n.classList.add("banner"),n.textContent="Restaurant Name",t.appendChild(n);const a=document.createElement("div");a.classList.add("nav-bar");const r=document.createElement("button");r.classList.add("nav-button"),r.id="menu-button",r.textContent="Menu",a.appendChild(r);const o=document.createElement("button");o.classList.add("nav-button"),o.id="story-button",o.textContent="Our Story",a.appendChild(o);const i=document.createElement("button");i.classList.add("nav-button"),i.id="home-button",i.textContent="Home",a.appendChild(i),t.appendChild(a);const s=document.createElement("div");s.classList.add("content-panel"),e.appendChild(t),e.appendChild(s),document.body.appendChild(e)})();const v=document.querySelector(".content-panel");t(v);const b=document.querySelector("#menu-button"),y=document.querySelector("#story-button"),w=document.querySelector("#home-button");y.addEventListener("click",(()=>{A(v),(e=>{const t=document.createElement("h1");t.classList.add("story-head"),t.textContent="Our Story";const n=document.createElement("p");n.classList.add("story-body"),n.textContent="Welcome to La Cucina, a farm-to-table Italian restaurant that has been a local favorite for over a decade. La Cucina was founded by Maria and Giovanni, a husband and wife team who shared a passion for traditional Italian cuisine and a commitment to using the freshest, highest-quality ingredients available. Maria grew up in Italy and learned to cook from her grandmother, who taught her the importance of using simple, seasonal ingredients to create delicious, authentic meals. Giovanni, on the other hand, grew up on a farm and developed a deep appreciation for the hard work and dedication that goes into growing and harvesting fresh produce.Together, Maria and Giovanni opened La Cucina with the goal of bringing a taste of Italy to their community while supporting local farmers and producers. They work closely with a network of small-scale farmers and artisanal producers to source the freshest, most flavorful ingredients possible, from heirloom tomatoes to hand-crafted cheeses. At La Cucina, every dish is made from scratch and cooked with care, using traditional Italian techniques and recipes passed down through generations. From handmade pastas to slow-cooked ragus, every bite is a celebration of Italy's rich culinary heritage. We invite you to join us at La Cucina and taste the difference that fresh, local ingredients can make. Our commitment toquality and sustainability is at the heart of everything we do, and we look forward to sharing our passion for Italian cuisine with you.",e.appendChild(t),e.appendChild(n)})(v)})),w.addEventListener("click",(()=>{A(v),t(v)})),b.addEventListener("click",(()=>{A(v),(e=>{const t=document.createElement("div");t.classList.add("menu-frame"),a(t,"Pasta Primavera","Fresh seasonal vegetables sautéed in garlic and olive oil, served over linguine pasta."),a(t,"Spaghetti Carbonara","Traditional pasta dish made with creamy egg sauce, crispy pancetta, and Parmesan cheese."),a(t,"Margherita Pizza","Classic Neapolitan pizza with San Marzano tomatoes, fresh mozzarella, and basil."),a(t,"Caprese Salad","Fresh mozzarella, ripe tomatoes, and fragrant basil drizzled with extra-virgin olive oil and balsamic glaze."),a(t,"Osso Buco","Braised veal shank in a rich tomato-based sauce served with creamy polenta."),a(t,"Chicken Marsala","Sautéed chicken breasts in a flavorful Marsala wine sauce with mushrooms and garlic."),a(t,"Tiramisu","Classic Italian dessert made with layers of coffee-soaked ladyfingers, mascarpone cream, and cocoa powder."),e.appendChild(t)})(v)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,